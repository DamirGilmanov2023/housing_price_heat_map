import sys
import time
from threading import Thread
import pandas
from PIL import Image
import math
import folium
import folium.plugins
from turfpy.measurement import boolean_point_in_polygon
from geojson import Point, MultiPolygon, Feature


polygon = Feature(
    geometry=MultiPolygon(
        [
            ([(55.17777734653526, 61.49392797033618), #озеро первое
(55.17895736840243, 61.492039695189696),
(55.180432395736396, 61.490838065551024),
(55.181710752759166, 61.48912145178149),
(55.183284115248725, 61.488091483519774),
(55.18485747773829, 61.48791982214282),
(55.18652917538345, 61.488091483519774),
(55.188102537873014, 61.48843480627368),
(55.18967590036258, 61.48826314489673),
(55.19124926285214, 61.48774816076587),
(55.192822625341705, 61.487576499388915),
(55.19449432298686, 61.487576499388915),
(55.19616602063203, 61.487576499388915),
(55.19773938312159, 61.48843480627368),
(55.19931274561115, 61.489293113158446),
(55.20098444325632, 61.48843480627368),
(55.202557805745876, 61.48912145178149),
(55.20413116823544, 61.48997975866626),
(55.20570453072501, 61.49066640417407),
(55.20727789321457, 61.490838065551024),
(55.20885125570413, 61.49066640417407),
(55.2104246181937, 61.49049474279712),
(55.21199798068326, 61.49100972692798),
(55.21366967832842, 61.491353049681884),
(55.21494803535119, 61.493069663451415),
(55.21642306268516, 61.494099631713134),
(55.21779975486352, 61.495816245482665),
(55.21917644704189, 61.49736119787524),
(55.22035646890907, 61.49924947302173),
(55.22163482593184, 61.50096608679126),
(55.223011518110205, 61.50268270056079),
(55.22438821028857, 61.50422765295337),
(55.225469897000146, 61.50645925085376),
(55.226748254022915, 61.50817586462329),
(55.22822328135688, 61.50937749426196),
(55.22950163837965, 61.511265769408446),
(55.230288319624435, 61.514012351439696),
(55.23077999540242, 61.516758933470946),
(55.23097666571362, 61.51967717687915),
(55.23097666571362, 61.522767081664306),
(55.230386654780034, 61.525342002318595),
(55.22979664384644, 61.52791692297289),
(55.22940330322405, 61.53066350500414),
(55.22891162744607, 61.533581748412345),
(55.22822328135688, 61.53615666906664),
(55.2274366001121, 61.538559928343986),
(55.2271415946453, 61.541306510375236),
(55.2273382649565, 61.544053092406486),
(55.22576490246694, 61.54439641516039),
(55.224191539977376, 61.54491139929125),
(55.22281484779901, 61.54628469030688),
(55.22133982046504, 61.547829642699455),
(55.21996312828667, 61.54920293371508),
(55.21838976579711, 61.5502329019768),
(55.21681640330755, 61.55040456335375),
(55.21543971112918, 61.55177785436938),
(55.21386634863961, 61.552807822631095),
(55.212194650994455, 61.55297948400805),
(55.21062128850489, 61.553322806761955),
(55.20894959085973, 61.55400945226977),
(55.207376228370165, 61.55435277502367),
(55.2059012010362, 61.553322806761955),
(55.20442617370224, 61.55212117712328),
(55.20285281121267, 61.551091208861564),
(55.201279448723106, 61.5502329019768),
(55.19970608623355, 61.54988957922289),
(55.19813272374398, 61.54903127233813),
(55.196657696410014, 61.54800130407641),
(55.19518266907605, 61.54697133581469),
(55.19360930658649, 61.54611302892992),
(55.19223261440812, 61.5447397379143),
(55.19085592222975, 61.54319478552172),
(55.18947923005138, 61.541821494506095),
(55.18820087302861, 61.540104880736564),
(55.18711918631704, 61.53804494421313),
(55.18574249413867, 61.53649999182055),
(55.184562472271494, 61.53444005529711),
(55.18348078555992, 61.53220845739672),
(55.18259576915954, 61.52980519811938),
(55.181809087914765, 61.52723027746508),
(55.18131741213677, 61.524312034056884),
(55.180727401203185, 61.52173711340259),
(55.17974404964721, 61.519505515502196),
(55.17885903324683, 61.51710225622485),
(55.178269022313245, 61.514527335570556),
(55.17777734653526, 61.511780753539306),
(55.17777734653526, 61.5088625101311),
(55.176990665290475, 61.50645925085376),
(55.17640065435689, 61.50388433019946),
(55.17649898951249, 61.50096608679126),
(55.177089000446074, 61.49839116613696),
(55.17758067622406, 61.49564458410571)],),
            ([(55.18716298075664, 61.57912366712097),  #озеро второе
(55.18824281172039, 61.57706373059753),
(55.1890281433304, 61.574660471320186),
(55.190304307196655, 61.572943857550655),
(55.19187497041666, 61.57208555066589),
(55.19344563363668, 61.57157056653503),
(55.195016296856686, 61.57139890515808),
(55.196685126527946, 61.57139890515808),
(55.198353956199206, 61.57139890515808),
(55.199924619419214, 61.57157056653503),
(55.20149528263923, 61.57105558240417),
(55.20316411231049, 61.57105558240417),
(55.2047347755305, 61.57088392102722),
(55.20640360520176, 61.57088392102722),
(55.207974268421765, 61.57054059827331),
(55.20954493164178, 61.5698539527655),
(55.21111559486179, 61.569167307257686),
(55.21258809163054, 61.56813733899597),
(55.214060588399306, 61.56710737073425),
(55.21553308516807, 61.56607740247253),
(55.21710374838808, 61.565219095587764),
(55.21857624515683, 61.564189127326046),
(55.219754242571845, 61.56230085217956),
(55.22112857288935, 61.560927561163936),
(55.222699236109364, 61.560240915656124),
(55.22417173287812, 61.561442545294796),
(55.224760731585626, 61.56401746594909),
(55.226331394805634, 61.564704111456905),
(55.22790205802564, 61.56556241834167),
(55.2295708876969, 61.56556241834167),
(55.23114155091692, 61.56504743421081),
(55.232712214136924, 61.56487577283386),
(55.23389021155193, 61.56676404798034),
(55.235068208966936, 61.56865232312683),
(55.235755374125695, 61.571227243781124),
(55.23624620638195, 61.573973825812374),
(55.236737038638196, 61.576720407843624),
(55.23683520508945, 61.579466989874874),
(55.23644253928445, 61.582213571906124),
(55.23585354057695, 61.58478849256041),
(55.23487187606444, 61.587020090460804),
(55.23330121284443, 61.58770673596862),
(55.231730549624416, 61.58805005872252),
(55.23084705156316, 61.59045331799987),
(55.23045438575816, 61.59319990003112),
(55.23035621930691, 61.59594648206237),
(55.230061719953156, 61.59869306409362),
(55.229767220599406, 61.60143964612487),
(55.22927638834315, 61.60418622815612),
(55.2285892231844, 61.60676114881041),
(55.227705725123144, 61.60916440808776),
(55.22692039351314, 61.6115676673651),
(55.22593872900063, 61.61379926526549),
(55.224760731585626, 61.61585920178893),
(55.22348456771937, 61.61757581555846),
(55.22220840385311, 61.61929242932799),
(55.220637740633094, 61.62015073621276),
(55.21906707741309, 61.62083738172057),
(55.21749641419308, 61.62152402722838),
(55.21592575097307, 61.62186734998229),
(55.21425692130181, 61.62203901135924),
(55.212686258081796, 61.622210672736195),
(55.21111559486179, 61.62135236585143),
(55.20954493164178, 61.62083738172057),
(55.20817060132427, 61.619464090704945),
(55.20669810455551, 61.61826246106627),
(55.20522560778675, 61.617232492804554),
(55.20365494456674, 61.61740415418151),
(55.20218244779798, 61.61860578382018),
(55.20061178457797, 61.618434122443226),
(55.19904112135796, 61.61740415418151),
(55.1977649574917, 61.615687540411976),
(55.196390627174196, 61.6141425880194),
(55.19511446330794, 61.61242597424987),
(55.19403463234418, 61.61036603772643),
(55.193052967831676, 61.60813443982604),
(55.192267636221665, 61.60555951917174),
(55.191384138160416, 61.6031562598944),
(55.190598806550405, 61.600753000617054),
(55.190009807842905, 61.59817807996276),
(55.1894208091354, 61.59560315930846),
(55.188929976879145, 61.59285657727721),
(55.18853731107414, 61.59010999524596),
(55.18814464526914, 61.58736341321471),
(55.18745748011039, 61.58478849256041),
(55.18627948269538, 61.5866767677069),
(55.18470881947537, 61.586505106329945),
(55.183628988511614, 61.58856504285338),
(55.18205832529161, 61.588736704230335),
(55.1818619923891, 61.585990122199085),
(55.1814693265841, 61.583243540167835),
(55.18156749303535, 61.58049695813659),
(55.182941823352856, 61.578952005744014),
(55.18451248657287, 61.57809369885925),
(55.18608314979288, 61.578437021613155)],),
			([(55.20064208449314, 61.65256914623575),  #озеро третье
(55.20231123112747, 61.65171083935098),
(55.20388219266566, 61.651195855220124),
(55.205551339299994, 61.65050920971231),
(55.207122300838186, 61.650165886958405),
(55.20869326237638, 61.649650902827545),
(55.210362409010706, 61.649650902827545),
(55.21203155564504, 61.64947924145059),
(55.21360251718323, 61.64999422558145),
(55.21507529362529, 61.65102419384317),
(55.21654807006735, 61.65222582348184),
(55.21772629122099, 61.65411409862833),
(55.2188063272785, 61.65634569652872),
(55.219984548432144, 61.6582339716752),
(55.22047547391283, 61.66098055370645),
(55.22096639939351, 61.6637271357377),
(55.22096639939351, 61.666645379145905),
(55.22057365900896, 61.66939196117716),
(55.219984548432144, 61.67196688183146),
(55.2188063272785, 61.674026818354896),
(55.21733355083644, 61.675056786616615),
(55.215860774394386, 61.67643007763224),
(55.214289812856194, 61.677288384517006),
(55.212718851318, 61.677803368647865),
(55.21104970468367, 61.67797503002482),
(55.209478743145475, 61.677803368647865),
(55.20790778160728, 61.67711672314005),
(55.20633682006909, 61.67660173900919),
(55.20486404362703, 61.67540010937052),
(55.20348945228111, 61.674026818354896),
(55.20231123112747, 61.67213854320841),
(55.20113300997382, 61.67025026806193),
(55.200052973916314, 61.66801867016154),
(55.199463863339496, 61.66544374950723),
(55.198776567666535, 61.662868828852936),
(55.19848201237812, 61.660122246821686),
(55.19818745708971, 61.65720400341348),
(55.19818745708971, 61.65428576000528),
(55.19916930805108, 61.65205416210489),
(55.20083845468541, 61.651195855220124)],),
			([(55.19391540738348, 61.69685217028161), #озеро четвертое
(55.19558477932458, 61.69599386339684),
(55.1971559529162, 61.69565054064294),
(55.198825324857296, 61.69565054064294),
(55.20000370505102, 61.69753881578942),
(55.20157487864264, 61.69736715441247),
(55.20324425058374, 61.69685217028161),
(55.20481542417536, 61.6965088475277),
(55.206484796116456, 61.6965088475277),
(55.20825236640703, 61.6965088475277),
(55.20982353999865, 61.69702383165856),
(55.2112965152408, 61.69805379992028),
(55.21257309378399, 61.699942075066765),
(55.213947870676655, 61.70131536608239),
(55.21512625087037, 61.703203641228875),
(55.21640282941357, 61.704920254998406),
(55.21699201951042, 61.7074951756527),
(55.217777606306235, 61.70989843493005),
(55.21817039970414, 61.7126450169613),
(55.21826859805361, 61.71539159899255),
(55.21817039970414, 61.7181381810238),
(55.217483011257805, 61.72071310167809),
(55.21630463106409, 61.72277303820154),
(55.21532264756932, 61.72500463610193),
(55.21384967232718, 61.7262062657406),
(55.21227849873556, 61.727064572625366),
(55.210707325143936, 61.727579556756226),
(55.20903795320284, 61.727064572625366),
(55.20746677961122, 61.726377927117554),
(55.20579740767012, 61.72569128160974),
(55.204324432427974, 61.72448965197107),
(55.202949655535306, 61.723116360955444),
(55.201673076992115, 61.72122808580895),
(55.200494696798394, 61.719168149285515),
(55.1992181182552, 61.717451535515984),
(55.198137936410966, 61.71504827623864),
(55.197254151265675, 61.71247335558434),
(55.19666496116882, 61.70972677355309),
(55.19607577107196, 61.7071518528988),
(55.19617396942144, 61.70440527086755),
(55.1950937875772, 61.702173672967156),
(55.19411180408243, 61.699942075066765),
(55.193817209034, 61.697195493035515)]),
			([(55.17374904437039, 61.583577169639156),  #озеро щелюгино
(55.172962928500134, 61.5830621855083),
(55.172471606081224, 61.5819463865581),
(55.17163635796908, 61.581603063804195),
(55.17085024209882, 61.58117391036181),
(55.17055544864748, 61.57980061934619),
(55.16972020053533, 61.57954312728076),
(55.168934084665075, 61.579628957969234),
(55.16819710103671, 61.580143942100094),
(55.167460117408346, 61.57945729659228),
(55.16677226602187, 61.57868482039599),
(55.16598615015162, 61.57816983626513),
(55.16515090203947, 61.57774068282275),
(55.164315653927325, 61.57774068282275),
(55.16348040581518, 61.57774068282275),
(55.16264515770303, 61.57774068282275),
(55.16195730631656, 61.578598989707515),
(55.161171190446304, 61.57868482039599),
(55.16038507457605, 61.57894231246142),
(55.1595498264639, 61.579113973838375),
(55.1590093718031, 61.580143942100094),
(55.15891110731932, 61.581603063804195),
(55.15910763628688, 61.5830621855083),
(55.15959895870579, 61.58417798445849),
(55.1590093718031, 61.585122122031734),
(55.158616313867974, 61.586323751670406),
(55.158174123690955, 61.587611211997555),
(55.15778106575583, 61.5888986723247),
(55.15832152041663, 61.58992864058642),
(55.15827238817474, 61.59130193160205),
(55.15748627230448, 61.59095860884814),
(55.15679842091801, 61.59027196334033),
(55.156061437289644, 61.59095860884814),
(55.15537358590317, 61.59164525435595),
(55.154538337791024, 61.59190274642138),
(55.154047015372115, 61.593104376060055),
(55.154145279855896, 61.59447766707568),
(55.15448920554913, 61.59576512740282),
(55.1546857345167, 61.597138418418446),
(55.15493139572615, 61.59859754012255),
(55.15527532141939, 61.599885000449696),
(55.155570114870734, 61.601172460776844),
(55.15601230504775, 61.602374090415516),
(55.156601891950444, 61.60331822798876),
(55.15704408212746, 61.60451985762743),
(55.15733887557881, 61.605893148643055),
(55.15807585920717, 61.606408132773915),
(55.1584689171423, 61.60760976241259),
(55.15930416525445, 61.60803891585497),
(55.15984461991525, 61.609154714805165),
(55.16053247130172, 61.609927191001454),
(55.161269454930085, 61.61044217513231),
(55.16205557080034, 61.61095715926317),
(55.162841686670596, 61.61147214339403),
(55.16362780254085, 61.6112146513286),
(55.16441391841111, 61.610871328574696),
(55.16524916652325, 61.61095715926317),
(55.16569135670027, 61.612158788901844),
(55.165789621184054, 61.61353207991747),
(55.166379208086745, 61.61447621749071),
(55.16721445619889, 61.61456204817919),
(55.167902307585365, 61.615248693687),
(55.16859015897184, 61.61593533919481),
(55.169376274842094, 61.616107000571766),
(55.17006412622857, 61.61679364607958),
(55.17085024209882, 61.61705113814501),
(55.17163635796908, 61.61730863021044),
(55.17242247383933, 61.617394460898915),
(55.17320858970959, 61.61705113814501),
(55.17394557333795, 61.61653615401415),
(55.17468255696632, 61.61593533919481),
(55.1753212761109, 61.61507703231005),
(55.17591086301359, 61.614132894736805),
(55.17635305319061, 61.61293126509813),
(55.17689350785141, 61.611901296836415),
(55.17743396251221, 61.610871328574696),
(55.177679623721666, 61.60949803755907),
(55.178121813898684, 61.6082964079204),
(55.17851487183381, 61.60709477828173),
(55.17880966528516, 61.60580731795458),
(55.17900619425272, 61.604434026938954),
(55.17930098770407, 61.603146566611805),
(55.17959578115541, 61.60185910628466),
(55.17989057460676, 61.60057164595751),
(55.18003797133243, 61.59919835494188),
(55.18003797133243, 61.59773923323778),
(55.18003797133243, 61.59628011153368),
(55.18003797133243, 61.594820989829586),
(55.18003797133243, 61.593361868125484),
(55.18008710357432, 61.59198857710986),
(55.18028363254189, 61.590615286094234),
(55.18111888065403, 61.59044362471728),
(55.18062755823512, 61.589327825767086),
(55.180185368058105, 61.588126196128414),
(55.17959578115541, 61.58718205855517),
(55.179104458736504, 61.5859804289165),
(55.178613136317594, 61.584864629966305)],),
			([(55.08848626444597, 61.40838043361035), #озеро Смолено и Исаково
(55.08691052673279, 61.40752212672558),
(55.085334789019605, 61.406663819840816),
(55.08366056769935, 61.40632049708691),
(55.08208482998617, 61.4056338515791),
(55.08050909227299, 61.40511886744824),
(55.07893335455981, 61.4056338515791),
(55.077357616846626, 61.40649215846386),
(55.0755849119193, 61.40649215846386),
(55.07400917420612, 61.40683548121777),
(55.07233495288587, 61.40649215846386),
(55.070759215172686, 61.40700714259472),
(55.06928196106658, 61.40803711085644),
(55.06780470696047, 61.40923874049511),
(55.06632745285437, 61.410440370133784),
(55.06485019874825, 61.411641999772456),
(55.06327446103508, 61.412671968034175),
(55.06209265775019, 61.41473190455761),
(55.060910854465305, 61.41679184108105),
(55.059532083966275, 61.41833679347363),
(55.05805482986017, 61.41936676173535),
(55.05667605936113, 61.42074005275097),
(55.05510032164795, 61.420396729997066),
(55.0534261003277, 61.42125503688183),
(55.051850362614516, 61.420911714127925),
(55.05037310850841, 61.41971008448925),
(55.0488958544023, 61.418680116227534),
(55.0474186002962, 61.42005340724316),
(55.046630731439606, 61.4224566665205),
(55.04603982979716, 61.4250315871748),
(55.045645895368864, 61.42777816920605),
(55.045645895368864, 61.43069641261426),
(55.046433764225455, 61.43327133326856),
(55.04791101833156, 61.43464462428418),
(55.049388272437675, 61.4356745925459),
(55.05096401015085, 61.435846253922854),
(55.05253974786403, 61.43601791529981),
(55.05401700197014, 61.434816285661135),
(55.05450942000551, 61.437562867692385),
(55.053524583934774, 61.43996612696973),
(55.05234278064989, 61.44202606349317),
(55.05096401015085, 61.4437426772627),
(55.050767042936705, 61.44648925929395),
(55.050767042936705, 61.44975082545606),
(55.050767042936705, 61.45284073024121),
(55.05096401015085, 61.45558731227246),
(55.051554911793296, 61.45833389430371),
(55.05263823147111, 61.46039383082715),
(55.05313064950648, 61.4631404128584),
(55.05441093639843, 61.46485702662793),
(55.055198805255024, 61.46726028590528),
(55.056577575754055, 61.46863357692091),
(55.05795634625309, 61.47000686793653),
(55.05913814953798, 61.47206680445997),
(55.060122985608714, 61.47429840236036),
(55.061501756107745, 61.476186677506846),
(55.06307749382093, 61.477216645768564),
(55.06465323153411, 61.47807495265333),
(55.06622896924729, 61.47858993678419),
(55.06780470696047, 61.478418275407236),
(55.06849409220999, 61.47584335475294),
(55.06908499385243, 61.47326843409864),
(55.06977437910194, 61.470693513444346),
(55.070857698779754, 61.46863357692091),
(55.07233495288587, 61.467431947282236),
(55.07391069059904, 61.46726028590528),
(55.075486428312225, 61.467946931413096),
(55.07696368241833, 61.468976899674814),
(55.07844093652444, 61.47000686793653),
(55.07991819063054, 61.471208497575205),
(55.08129696112958, 61.47258178859083),
(55.082577248021536, 61.47429840236036),
(55.08405450212764, 61.47532837062208),
(55.08553175623375, 61.47653000026075),
(55.08720597755401, 61.47687332301466),
(55.08868323166011, 61.47584335475294),
(55.089471100516704, 61.473440095475596),
(55.090849871015735, 61.47189514308302),
(55.09252409233599, 61.47138015895216),
(55.09419831365624, 61.47155182032911),
(55.09557708415528, 61.472925111344736),
(55.09705433826139, 61.47155182032911),
(55.09872855958164, 61.471208497575205),
(55.10030429729482, 61.471723481706064),
(55.101880035008, 61.47206680445997),
(55.10335728911411, 61.47103683619825),
(55.10493302682729, 61.47035019069044),
(55.106410280933396, 61.46932022242872),
(55.108084502253654, 61.467946931413096),
(55.10906933832439, 61.465543672135745),
(55.1101526580022, 61.46348373561231),
(55.110842043251715, 61.46090881495801),
(55.11182687932246, 61.45850555568067),
(55.11251626457197, 61.45575897364942),
(55.113304133428564, 61.45318405299512),
(55.11340261703563, 61.45043747096387),
(55.11399351867808, 61.44786255030957),
(55.11458442032052, 61.445287629655276),
(55.11507683835589, 61.442541047624026),
(55.11537228917711, 61.439794465592776),
(55.115470772784185, 61.437047883561526),
(55.115470772784185, 61.43412964015332),
(55.115470772784185, 61.43103973536817),
(55.11487987114174, 61.42846481471387),
(55.113304133428564, 61.42829315333692),
(55.111629912108306, 61.42829315333692),
(55.11034962521635, 61.42657653956738),
(55.10906933832439, 61.42485992579785),
(55.10778905143243, 61.423143312028316),
(55.10680421536169, 61.420911714127925),
(55.10552392846973, 61.419195100358394),
(55.1041451579707, 61.41782180934277),
(55.10256942025752, 61.417135163834956),
(55.10109216615141, 61.41610519557324),
(55.09971339565238, 61.41473190455761),
(55.09853159236749, 61.41284362941113),
(55.09725130547553, 61.410955354264644),
(55.0958725349765, 61.40958206324902),
(55.094395280870394, 61.4085520949873),
(55.09281954315721, 61.40838043361035),
(55.09114532183696, 61.4085520949873),
(55.089471100516704, 61.40838043361035)],),
			([(55.0076363293309, 61.39186010856843), #озеро Синеглазово
(55.00924476744037, 61.39134477671027),
(55.01085320554984, 61.391172999424214),
(55.01226058889563, 61.389798781135795),
(55.01396955438695, 61.38962700384974),
(55.01557799249642, 61.3901423357079),
(55.01678432107852, 61.39203188585448),
(55.01839275918799, 61.392203663140535),
(55.02010172467931, 61.39254721771264),
(55.02171016278878, 61.393406104142905),
(55.023218073516404, 61.394436767859226),
(55.024826511625875, 61.395123877003435),
(55.026434949735346, 61.3959827634337),
(55.028143915226664, 61.3959827634337),
(55.02965182595429, 61.39701342715002),
(55.030858154536396, 61.39924653186871),
(55.031561846209286, 61.40182319115951),
(55.03236606526402, 61.40422807316425),
(55.03347186646428, 61.40680473245504),
(55.03457766766455, 61.40886605988768),
(55.035985051010336, 61.41041205546216),
(55.03739243435612, 61.411958051036635),
(55.03819665341086, 61.414362933041375),
(55.03879981770191, 61.417111369618226),
(55.03910139984743, 61.41985980619508),
(55.03900087246559, 61.42260824277192),
(55.03819665341086, 61.42501312477667),
(55.03739243435612, 61.42741800678141),
(55.036588215301386, 61.430509997930365),
(55.036085578392175, 61.43325843450721),
(55.03528135933744, 61.435835093798005),
(55.03407503075534, 61.43772464394459),
(55.03317028431876, 61.44012952594933),
(55.03176290097297, 61.44150374423776),
(55.03075762715455, 61.44373684895645),
(55.02914918904508, 61.44442395810066),
(55.027641278317454, 61.44545462181698),
(55.025932312826136, 61.44614173096119),
(55.024323874716664, 61.4464852855333),
(55.02271543660719, 61.446828840105404),
(55.02100647111588, 61.446828840105404),
(55.01929750562457, 61.446828840105404),
(55.0176890675151, 61.44751594924961),
(55.01608062940563, 61.44717239467751),
(55.01447219129616, 61.44700061739145),
(55.012863753186686, 61.4464852855333),
(55.011255315077214, 61.44579817638908),
(55.00964687696774, 61.44493928995882),
(55.00803843885827, 61.44408040352855),
(55.0064300007488, 61.44270618524013),
(55.005022617403014, 61.440988412379596),
(55.00371576143907, 61.439270639519066),
(55.002308378093275, 61.437552866658535),
(55.00090099474749, 61.43617864837012),
(54.99959413878354, 61.434460875509586),
(54.99878991972881, 61.43205599350484),
(54.99778464591039, 61.4296511115001),
(54.99687989947381, 61.42724622949535),
(54.99617620780092, 61.42466957020456),
(54.995472516128025, 61.42209291091376),
(54.99466829707329, 61.41968802890902),
(54.99346196849118, 61.42174935634166),
(54.99396460540039, 61.42449779291851),
(54.994366714927764, 61.42724622949535),
(54.99466829707329, 61.429994666072204),
(54.99476882445513, 61.432743102649056),
(54.99396460540039, 61.435147984653796),
(54.99245669467277, 61.436350425656165),
(54.9908482565633, 61.43720931208643),
(54.989239818453825, 61.43703753480038),
(54.98833507201724, 61.434632652795635),
(54.98793296248988, 61.431712438932735),
(54.98753085296251, 61.42896400235588),
(54.98732979819883, 61.42621556577904),
(54.98722927081698, 61.42346712920219),
(54.987028216053304, 61.42054691533929),
(54.98652557914409, 61.41762670147639),
(54.98612346961672, 61.414706487613486),
(54.985922414853036, 61.411958051036635),
(54.98552030532567, 61.409037837173734),
(54.98541977794383, 61.40628940059688),
(54.9851181957983, 61.40354096402004),
(54.98491714103462, 61.40079252744319),
(54.98491714103462, 61.39787231358029),
(54.9851181957983, 61.394952099717386),
(54.98612346961672, 61.392718994998695),
(54.98753085296251, 61.39134477671027),
(54.98903876369014, 61.3901423357079),
(54.99074772918145, 61.38962700384974),
(54.99235616729092, 61.38945522656368),
(54.99396460540039, 61.38859634013342),
(54.995573043509864, 61.38773745370315),
(54.997181481619336, 61.387565676417104),
(54.99878991972881, 61.38842456284737),
(55.00039835783828, 61.38962700384974),
(55.00200679594775, 61.39031411299395),
(55.00381628882091, 61.39031411299395),
(55.00552525431222, 61.390485890280004),
(55.00713369242169, 61.391172999424214)],),
			([(55.1008865077364, 61.270111312666344),  #Шершнёвское водохранилище
(55.10309355202108, 61.274577522103726),
(55.10570187708479, 61.27801306782479),
(55.10851084253802, 61.28076150440164),
(55.11091852721222, 61.284540604694804),
(55.1131255714969, 61.288663259560074),
(55.11513197539206, 61.293129468997456),
(55.117940940845294, 61.2958779055743),
(55.12095054668804, 61.29862634215115),
(55.1241607929203, 61.30034411501168),
(55.127371039152564, 61.3017183333001),
(55.13058128538483, 61.30068766958379),
(55.13339025083806, 61.297939233006936),
(55.13539665473322, 61.29347302356956),
(55.136600497070326, 61.28831970498797),
(55.13981074330258, 61.28660193212744),
(55.14261970875582, 61.289350368704284),
(55.14462611265098, 61.293816578141666),
(55.14623123576711, 61.29862634215115),
(55.14703379732518, 61.30412321530485),
(55.14623123576711, 61.309620088458544),
(55.146030595377596, 61.31511696161224),
(55.146030595377596, 61.32095738933804),
(55.146030595377596, 61.32679781706385),
(55.14302098953485, 61.328859144496484),
(55.13981074330258, 61.328172035352274),
(55.13720241823887, 61.3243929350591),
(55.13399217200661, 61.32542359877542),
(55.13078192577434, 61.32714137163595),
(55.12757167954208, 61.32782848078016),
(55.12436143330982, 61.328172035352274),
(55.12115118707756, 61.32782848078016),
(55.117940940845294, 61.32851558992438),
(55.11473069461303, 61.328859144496484),
(55.11252365032835, 61.32473648963121),
(55.1095140444856, 61.32267516219857),
(55.10650443864286, 61.32508004420332),
(55.103695473189624, 61.32782848078016),
(55.10048522695736, 61.328859144496484),
(55.097274980725096, 61.32748492620806),
(55.09546921721945, 61.32267516219857),
(55.092459611376704, 61.31992672562173),
(55.089450005533955, 61.31786539818909),
(55.08684168047024, 61.31442985246803),
(55.08363143423798, 61.313742743323814),
(55.080421188005715, 61.31168141589118),
(55.08062182839523, 61.30618454273748),
(55.08202631112185, 61.30103122415589),
(55.083430793848464, 61.2958779055743),
(55.08202631112185, 61.29072458699271),
(55.07981926683717, 61.28660193212744),
(55.07801350333152, 61.28179216811795),
(55.07741158216297, 61.27629529496426),
(55.07721094177345, 61.27079842181056),
(55.07640838021539, 61.265301548656865),
(55.07380005515167, 61.261866002935804),
(55.07058980891941, 61.26289666665212),
(55.067580203076666, 61.26049178464738),
(55.06477123762343, 61.25774334807053),
(55.06176163178069, 61.25533846606579),
(55.05855138554843, 61.25499491149368),
(55.05534113931616, 61.25636912978211),
(55.0521308930839, 61.256025575209996),
(55.05052576996776, 61.250872256628405),
(55.04811808529357, 61.24709315633524),
(55.0461116813984, 61.242626946897865),
(55.04430591789276, 61.23781718288838),
(55.042500154387106, 61.23300741887889),
(55.040293110102425, 61.22888476401362),
(55.03888862737581, 61.22373144543203),
(55.0386879869863, 61.218234572278334),
(55.0386879869863, 61.21239414455253),
(55.03888862737581, 61.20689727139883),
(55.03969118893388, 61.201400398245134),
(55.04189823321856, 61.197277743379864),
(55.04430591789276, 61.1934986430867),
(55.047315523735506, 61.19590352509144),
(55.04671360256695, 61.201400398245134),
(55.04631232178792, 61.20689727139883),
(55.04631232178792, 61.21273769912464),
(55.04751616412502, 61.21789101770623),
(55.05032512957825, 61.220639454283074),
(55.05313409503148, 61.22373144543203),
(55.05614370087422, 61.22613632743677),
(55.05915330671697, 61.22854120944152),
(55.06216291255972, 61.230946091446256),
(55.06517251840247, 61.23300741887889),
(55.06838276463473, 61.23438163716732),
(55.07119173008796, 61.23713007374417),
(55.074401976320225, 61.23816073746048),
(55.077812862942004, 61.23816073746048),
(55.07981926683717, 61.242626946897865),
(55.083029513069434, 61.24400116518629),
(55.08623975930169, 61.24571893804682),
(55.088647443975894, 61.249498038339986),
(55.091657049818636, 61.25224647491683),
(55.09386409410332, 61.25636912978211),
(55.096071138388, 61.26049178464738),
(55.09827818267268, 61.26461443951265),
(55.100284586567845, 61.26908064895003)],),
            #([],),
        ]
    )
)

try:
    excel_data = pandas.read_excel('Тепловая карта.xlsx', sheet_name='зонирование')
    d = excel_data['Долгота'].tolist()
    s = excel_data['Широта'].tolist()
    x_pr = excel_data['цена, руб./кв.м'].tolist()
    #adr = excel_data['Адрес'].tolist()
    #stoim = excel_data['Стоимость квартиры, руб.'].tolist()
except:
    print("Ошибка Excel файла")
    time.sleep(3)
    sys.exit()
MIN_LAT=s[0]
MAX_LAT=s[0]
MIN_LON=d[0]
MAX_LON=d[0]
for dd in d:
    if dd<MIN_LON: MIN_LON=dd
    if dd>MAX_LON: MAX_LON=dd
for ss in s:
    if ss<MIN_LAT: MIN_LAT=ss
    if ss>MAX_LAT: MAX_LAT=ss
MIN_LAT=MIN_LAT-0.05
MAX_LAT=MAX_LAT+0.05
MIN_LON=MIN_LON-0.05
MAX_LON=MAX_LON+0.05

# измените их, чтобы изменить степень детализации сгенерированного изображения.
# (1000x1000 хорошо, но очень медленно)
try:
    print("Введите разрешение тепловой карты")
    print("(например 1000)")
    MAX_X=int(input())
    MAX_Y=int(MAX_X*(MAX_LAT-MIN_LAT)/(MAX_LON-MIN_LON))
except:
    print("Ошибка ввода. Будет присвоено значение по умолчанию 1000")
    MAX_X=1000
    MAX_Y=int(MAX_X*(MAX_LAT-MIN_LAT)/(MAX_LON-MIN_LON))

#радиус создания кластеров
try:
    print("Введите радиус создания кластеров")
    print("(например 500)")
    CLUSTER_DIST=int(input())
except:
    print("Ошибка ввода. Будет присвоено значение по умолчанию 500")
    CLUSTER_DIST = 500

#радиус построения
try:
    print("Введите радиус построения тепловой карты")
    print("(например 800)")
    RADIUS_POSTR=int(input())
except:
    print("Ошибка ввода. Будет присвоено значение по умолчанию 800")
    RADIUS_POSTR=800

#количество делений на ценовой шкале
try:
    print("Введите количество делений на ценовой шкале")
    print("(например 20)")
    DEL_SCHALA=int(input())
except:
    print("Ошибка ввода. Будет присвоено значение по умолчанию 20")
    DEL_SCHALA=20

DEL_SCHALA-=1

def pixel_to_ll(x,y):
    delta_lat = MAX_LAT-MIN_LAT
    delta_lon = MAX_LON-MIN_LON

    # x - долгота, y - широта
    # 0,0 - MIN_LON, MAX_LAT

    x_frac = float(x)/MAX_X
    y_frac = float(y)/MAX_Y

    lon = MIN_LON + x_frac*delta_lon
    lat = MAX_LAT - y_frac*delta_lat


    calc_x, calc_y = ll_to_pixel(lat, lon)

    if abs(calc_x-x) > 1 or abs(calc_y-y) > 1:
        print("Mismatch: %s, %s => %s %s" % (
            x,y, calc_x, calc_y))

    return lat, lon

def ll_to_pixel(lat,lon):
    adj_lat = lat-MIN_LAT
    adj_lon = lon-MIN_LON

    delta_lat = MAX_LAT-MIN_LAT
    delta_lon = MAX_LON-MIN_LON

    # x - долгота, y - широта
    # 0,0 - MIN_LON, MAX_LAT

    lon_frac = adj_lon/delta_lon
    lat_frac = adj_lat/delta_lat

    x = int(lon_frac*MAX_X)
    y = int((1-lat_frac)*MAX_Y)

    return x,y

def calculateTheDistance(A1, A2, B1, B2):
    EARTH_RADIUS=6372795
    lat1 = A1 * math.pi / 180
    lat2 = B1 * math.pi / 180
    long1 = A2 * math.pi / 180
    long2 = B2 * math.pi / 180

    cl1 = math.cos(lat1)
    cl2 = math.cos(lat2)
    sl1 = math.sin(lat1)
    sl2 = math.sin(lat2)
    delta = long2 - long1
    cdelta = math.cos(delta)
    sdelta = math.sin(delta)

    y = math.sqrt(pow(cl2 * sdelta, 2) + pow(cl1 * sl2 - sl1 * cl2 * cdelta, 2))
    x = sl1 * sl2 + cl1 * cl2 * cdelta

    ad = math.atan2(y,x)
    dist = ad * EARTH_RADIUS

    return dist

def add_categorical_legend(folium_map, title, colors_, labels):
    #if len(colors_) != len(labels):
    #    raise ValueError("colors and labels must have the same length.")

    color_by_label = dict(zip(labels, colors_))

    legend_categories = ""
    for label, color_ in color_by_label.items():
        legend_categories += f"<li><span style='background:rgba({color_[0]}, {color_[1]}, {color_[2]}, 1)'></span>{label}</li>"

    legend_html = f"""
    <div id='maplegend' class='maplegend'>
      <div class='legend-title'>{title}</div>
      <div class='legend-scale'>
        <ul class='legend-labels'>
        {legend_categories}
        </ul>
      </div>
    </div>
    """
    script = f"""
        <script type="text/javascript">
        var oneTimeExecution = (function() {{
                    var executed = false;
                    return function() {{
                        if (!executed) {{
                             var checkExist = setInterval(function() {{
                                       if ((document.getElementsByClassName('leaflet-top leaflet-right').length) || (!executed)) {{
                                          document.getElementsByClassName('leaflet-top leaflet-right')[0].style.display = "flex"
                                          document.getElementsByClassName('leaflet-top leaflet-right')[0].style.flexDirection = "column"
                                          document.getElementsByClassName('leaflet-top leaflet-right')[0].innerHTML += `{legend_html}`;
                                          clearInterval(checkExist);
                                          executed = true;
                                       }}
                                    }}, 100);
                        }}
                    }};
                }})();
        oneTimeExecution()
        </script>
      """

    css = """

    <style type='text/css'>
      .maplegend {
        z-index:9999;
        float:right;
        background-color: rgba(255, 255, 255, 1);
        border-radius: 5px;
        border: 2px solid #bbb;
        padding: 10px;
        font-size:12px;
        positon: relative;
      }
      .maplegend .legend-title {
        text-align: left;
        margin-bottom: 5px;
        font-weight: bold;
        font-size: 90%;
        }
      .maplegend .legend-scale ul {
        margin: 0;
        margin-bottom: 5px;
        padding: 0;
        float: left;
        list-style: none;
        }
      .maplegend .legend-scale ul li {
        font-size: 80%;
        list-style: none;
        margin-left: 0;
        line-height: 18px;
        margin-bottom: 2px;
        }
      .maplegend ul.legend-labels li span {
        display: block;
        float: left;
        height: 16px;
        width: 30px;
        margin-right: 5px;
        margin-left: 0;
        border: 0px solid #ccc;
        }
      .maplegend .legend-source {
        font-size: 80%;
        color: #777;
        clear: both;
        }
      .maplegend a {
        color: #777;
        }
    </style>
    """

    folium_map.get_root().header.add_child(folium.Element(script + css))

    return folium_map

def load_prices():
    global x_pr
    global s
    global d
    prices = []
    i=0
    prices_bool=[]
    while i<len(x_pr):
        prices.append((float(d[i]), float(s[i]), int(x_pr[i])))
        prices_bool.append(True)
        i=i+1
    i=0
    prom_prices=0
    prom_j=0
    new_prices=[]
    while i<len(prices):
        if prices_bool[i]==True:
            a_lat=prices[i][1]
            a_lon=prices[i][0]
            j=i+1
            while j<len(prices):
                if prices_bool[j]==True:
                    b_lat = prices[j][1]
                    b_lon = prices[j][0]
                    if calculateTheDistance(a_lat,a_lon,b_lat,b_lon)<CLUSTER_DIST:
                        prom_prices+=prices[j][2]
                        prom_j+=1
                        prices_bool[j]=False
                j+=1
            if prom_prices!=0:
                n_p=[a_lon,a_lat,((prices[i][2]+prom_prices)/(prom_j+1))]
                new_prices.append(n_p)
                prom_prices=0
                prom_j=0
        i+=1
    i=0
    while i<len(prices):
        if prices_bool[i]==True:
            n_p=[prices[i][0],prices[i][1],prices[i][2]]
            new_prices.append(n_p)
            prices_bool[i] = False
        i+=1
    return new_prices

buckets=[]
colors = []

magma_data=[[0.001462, 0.000466, 0.013866],
              [0.002258, 0.001295, 0.018331],
              [0.003279, 0.002305, 0.023708],
              [0.004512, 0.003490, 0.029965],
              [0.005950, 0.004843, 0.037130],
              [0.007588, 0.006356, 0.044973],
              [0.009426, 0.008022, 0.052844],
              [0.011465, 0.009828, 0.060750],
              [0.013708, 0.011771, 0.068667],
              [0.016156, 0.013840, 0.076603],
              [0.018815, 0.016026, 0.084584],
              [0.021692, 0.018320, 0.092610],
              [0.024792, 0.020715, 0.100676],
              [0.028123, 0.023201, 0.108787],
              [0.031696, 0.025765, 0.116965],
              [0.035520, 0.028397, 0.125209],
              [0.039608, 0.031090, 0.133515],
              [0.043830, 0.033830, 0.141886],
              [0.048062, 0.036607, 0.150327],
              [0.052320, 0.039407, 0.158841],
              [0.056615, 0.042160, 0.167446],
              [0.060949, 0.044794, 0.176129],
              [0.065330, 0.047318, 0.184892],
              [0.069764, 0.049726, 0.193735],
              [0.074257, 0.052017, 0.202660],
              [0.078815, 0.054184, 0.211667],
              [0.083446, 0.056225, 0.220755],
              [0.088155, 0.058133, 0.229922],
              [0.092949, 0.059904, 0.239164],
              [0.097833, 0.061531, 0.248477],
              [0.102815, 0.063010, 0.257854],
              [0.107899, 0.064335, 0.267289],
              [0.113094, 0.065492, 0.276784],
              [0.118405, 0.066479, 0.286321],
              [0.123833, 0.067295, 0.295879],
              [0.129380, 0.067935, 0.305443],
              [0.135053, 0.068391, 0.315000],
              [0.140858, 0.068654, 0.324538],
              [0.146785, 0.068738, 0.334011],
              [0.152839, 0.068637, 0.343404],
              [0.159018, 0.068354, 0.352688],
              [0.165308, 0.067911, 0.361816],
              [0.171713, 0.067305, 0.370771],
              [0.178212, 0.066576, 0.379497],
              [0.184801, 0.065732, 0.387973],
              [0.191460, 0.064818, 0.396152],
              [0.198177, 0.063862, 0.404009],
              [0.204935, 0.062907, 0.411514],
              [0.211718, 0.061992, 0.418647],
              [0.218512, 0.061158, 0.425392],
              [0.225302, 0.060445, 0.431742],
              [0.232077, 0.059889, 0.437695],
              [0.238826, 0.059517, 0.443256],
              [0.245543, 0.059352, 0.448436],
              [0.252220, 0.059415, 0.453248],
              [0.258857, 0.059706, 0.457710],
              [0.265447, 0.060237, 0.461840],
              [0.271994, 0.060994, 0.465660],
              [0.278493, 0.061978, 0.469190],
              [0.284951, 0.063168, 0.472451],
              [0.291366, 0.064553, 0.475462],
              [0.297740, 0.066117, 0.478243],
              [0.304081, 0.067835, 0.480812],
              [0.310382, 0.069702, 0.483186],
              [0.316654, 0.071690, 0.485380],
              [0.322899, 0.073782, 0.487408],
              [0.329114, 0.075972, 0.489287],
              [0.335308, 0.078236, 0.491024],
              [0.341482, 0.080564, 0.492631],
              [0.347636, 0.082946, 0.494121],
              [0.353773, 0.085373, 0.495501],
              [0.359898, 0.087831, 0.496778],
              [0.366012, 0.090314, 0.497960],
              [0.372116, 0.092816, 0.499053],
              [0.378211, 0.095332, 0.500067],
              [0.384299, 0.097855, 0.501002],
              [0.390384, 0.100379, 0.501864],
              [0.396467, 0.102902, 0.502658],
              [0.402548, 0.105420, 0.503386],
              [0.408629, 0.107930, 0.504052],
              [0.414709, 0.110431, 0.504662],
              [0.420791, 0.112920, 0.505215],
              [0.426877, 0.115395, 0.505714],
              [0.432967, 0.117855, 0.506160],
              [0.439062, 0.120298, 0.506555],
              [0.445163, 0.122724, 0.506901],
              [0.451271, 0.125132, 0.507198],
              [0.457386, 0.127522, 0.507448],
              [0.463508, 0.129893, 0.507652],
              [0.469640, 0.132245, 0.507809],
              [0.475780, 0.134577, 0.507921],
              [0.481929, 0.136891, 0.507989],
              [0.488088, 0.139186, 0.508011],
              [0.494258, 0.141462, 0.507988],
              [0.500438, 0.143719, 0.507920],
              [0.506629, 0.145958, 0.507806],
              [0.512831, 0.148179, 0.507648],
              [0.519045, 0.150383, 0.507443],
              [0.525270, 0.152569, 0.507192],
              [0.531507, 0.154739, 0.506895],
              [0.537755, 0.156894, 0.506551],
              [0.544015, 0.159033, 0.506159],
              [0.550287, 0.161158, 0.505719],
              [0.556571, 0.163269, 0.505230],
              [0.562866, 0.165368, 0.504692],
              [0.569172, 0.167454, 0.504105],
              [0.575490, 0.169530, 0.503466],
              [0.581819, 0.171596, 0.502777],
              [0.588158, 0.173652, 0.502035],
              [0.594508, 0.175701, 0.501241],
              [0.600868, 0.177743, 0.500394],
              [0.607238, 0.179779, 0.499492],
              [0.613617, 0.181811, 0.498536],
              [0.620005, 0.183840, 0.497524],
              [0.626401, 0.185867, 0.496456],
              [0.632805, 0.187893, 0.495332],
              [0.639216, 0.189921, 0.494150],
              [0.645633, 0.191952, 0.492910],
              [0.652056, 0.193986, 0.491611],
              [0.658483, 0.196027, 0.490253],
              [0.664915, 0.198075, 0.488836],
              [0.671349, 0.200133, 0.487358],
              [0.677786, 0.202203, 0.485819],
              [0.684224, 0.204286, 0.484219],
              [0.690661, 0.206384, 0.482558],
              [0.697098, 0.208501, 0.480835],
              [0.703532, 0.210638, 0.479049],
              [0.709962, 0.212797, 0.477201],
              [0.716387, 0.214982, 0.475290],
              [0.722805, 0.217194, 0.473316],
              [0.729216, 0.219437, 0.471279],
              [0.735616, 0.221713, 0.469180],
              [0.742004, 0.224025, 0.467018],
              [0.748378, 0.226377, 0.464794],
              [0.754737, 0.228772, 0.462509],
              [0.761077, 0.231214, 0.460162],
              [0.767398, 0.233705, 0.457755],
              [0.773695, 0.236249, 0.455289],
              [0.779968, 0.238851, 0.452765],
              [0.786212, 0.241514, 0.450184],
              [0.792427, 0.244242, 0.447543],
              [0.798608, 0.247040, 0.444848],
              [0.804752, 0.249911, 0.442102],
              [0.810855, 0.252861, 0.439305],
              [0.816914, 0.255895, 0.436461],
              [0.822926, 0.259016, 0.433573],
              [0.828886, 0.262229, 0.430644],
              [0.834791, 0.265540, 0.427671],
              [0.840636, 0.268953, 0.424666],
              [0.846416, 0.272473, 0.421631],
              [0.852126, 0.276106, 0.418573],
              [0.857763, 0.279857, 0.415496],
              [0.863320, 0.283729, 0.412403],
              [0.868793, 0.287728, 0.409303],
              [0.874176, 0.291859, 0.406205],
              [0.879464, 0.296125, 0.403118],
              [0.884651, 0.300530, 0.400047],
              [0.889731, 0.305079, 0.397002],
              [0.894700, 0.309773, 0.393995],
              [0.899552, 0.314616, 0.391037],
              [0.904281, 0.319610, 0.388137],
              [0.908884, 0.324755, 0.385308],
              [0.913354, 0.330052, 0.382563],
              [0.917689, 0.335500, 0.379915],
              [0.921884, 0.341098, 0.377376],
              [0.925937, 0.346844, 0.374959],
              [0.929845, 0.352734, 0.372677],
              [0.933606, 0.358764, 0.370541],
              [0.937221, 0.364929, 0.368567],
              [0.940687, 0.371224, 0.366762],
              [0.944006, 0.377643, 0.365136],
              [0.947180, 0.384178, 0.363701],
              [0.950210, 0.390820, 0.362468],
              [0.953099, 0.397563, 0.361438],
              [0.955849, 0.404400, 0.360619],
              [0.958464, 0.411324, 0.360014],
              [0.960949, 0.418323, 0.359630],
              [0.963310, 0.425390, 0.359469],
              [0.965549, 0.432519, 0.359529],
              [0.967671, 0.439703, 0.359810],
              [0.969680, 0.446936, 0.360311],
              [0.971582, 0.454210, 0.361030],
              [0.973381, 0.461520, 0.361965],
              [0.975082, 0.468861, 0.363111],
              [0.976690, 0.476226, 0.364466],
              [0.978210, 0.483612, 0.366025],
              [0.979645, 0.491014, 0.367783],
              [0.981000, 0.498428, 0.369734],
              [0.982279, 0.505851, 0.371874],
              [0.983485, 0.513280, 0.374198],
              [0.984622, 0.520713, 0.376698],
              [0.985693, 0.528148, 0.379371],
              [0.986700, 0.535582, 0.382210],
              [0.987646, 0.543015, 0.385210],
              [0.988533, 0.550446, 0.388365],
              [0.989363, 0.557873, 0.391671],
              [0.990138, 0.565296, 0.395122],
              [0.990871, 0.572706, 0.398714],
              [0.991558, 0.580107, 0.402441],
              [0.992196, 0.587502, 0.406299],
              [0.992785, 0.594891, 0.410283],
              [0.993326, 0.602275, 0.414390],
              [0.993834, 0.609644, 0.418613],
              [0.994309, 0.616999, 0.422950],
              [0.994738, 0.624350, 0.427397],
              [0.995122, 0.631696, 0.431951],
              [0.995480, 0.639027, 0.436607],
              [0.995810, 0.646344, 0.441361],
              [0.996096, 0.653659, 0.446213],
              [0.996341, 0.660969, 0.451160],
              [0.996580, 0.668256, 0.456192],
              [0.996775, 0.675541, 0.461314],
              [0.996925, 0.682828, 0.466526],
              [0.997077, 0.690088, 0.471811],
              [0.997186, 0.697349, 0.477182],
              [0.997254, 0.704611, 0.482635],
              [0.997325, 0.711848, 0.488154],
              [0.997351, 0.719089, 0.493755],
              [0.997351, 0.726324, 0.499428],
              [0.997341, 0.733545, 0.505167],
              [0.997285, 0.740772, 0.510983],
              [0.997228, 0.747981, 0.516859],
              [0.997138, 0.755190, 0.522806],
              [0.997019, 0.762398, 0.528821],
              [0.996898, 0.769591, 0.534892],
              [0.996727, 0.776795, 0.541039],
              [0.996571, 0.783977, 0.547233],
              [0.996369, 0.791167, 0.553499],
              [0.996162, 0.798348, 0.559820],
              [0.995932, 0.805527, 0.566202],
              [0.995680, 0.812706, 0.572645],
              [0.995424, 0.819875, 0.579140],
              [0.995131, 0.827052, 0.585701],
              [0.994851, 0.834213, 0.592307],
              [0.994524, 0.841387, 0.598983],
              [0.994222, 0.848540, 0.605696],
              [0.993866, 0.855711, 0.612482],
              [0.993545, 0.862859, 0.619299],
              [0.993170, 0.870024, 0.626189],
              [0.992831, 0.877168, 0.633109],
              [0.992440, 0.884330, 0.640099],
              [0.992089, 0.891470, 0.647116],
              [0.991688, 0.898627, 0.654202],
              [0.991332, 0.905763, 0.661309],
              [0.990930, 0.912915, 0.668481],
              [0.990570, 0.920049, 0.675675],
              [0.990175, 0.927196, 0.682926],
              [0.989815, 0.934329, 0.690198],
              [0.989434, 0.941470, 0.697519],
              [0.989077, 0.948604, 0.704863],
              [0.988717, 0.955742, 0.712242],
              [0.988367, 0.962878, 0.719649],
              [0.988033, 0.970012, 0.727077],
              [0.987691, 0.977154, 0.734536],
              [0.987387, 0.984288, 0.742002],
              [0.987053, 0.991438, 0.749504]]
MIN_x_pr=x_pr[0]
MAX_x_pr=x_pr[0]
for xx_pr in x_pr:
    if xx_pr<MIN_x_pr: MIN_x_pr=xx_pr
    if xx_pr>MAX_x_pr: MAX_x_pr=xx_pr
delta_x_pr=MAX_x_pr-MIN_x_pr
step_x_pr=delta_x_pr/DEL_SCHALA
buckets=[]
i=0
data_x_pr=MAX_x_pr
while i<DEL_SCHALA:
    buckets.append(data_x_pr)
    data_x_pr=data_x_pr-step_x_pr
    i=i+1
buckets.append(MIN_x_pr)
colors = []
n_colors = len(buckets) + 1
for i in range(n_colors):
    r, g, b = magma_data[int((len(magma_data)-1) * (float(i)/n_colors))]
    colors.append((int(r*256), int(g*256), int(b*256)))


def get_h(lon, lat, lst):
    point = Feature(geometry=Point([lat, lon]))
    if boolean_point_in_polygon(point, polygon): return None
    sum0 = 0
    sum1 = 0
    temp = []
    # Traverse, чтобы получить расстояние этой точки от всех точек отбора проб
    for point in lst:
        if lon == point[0] and lat == point[1]:
            return point[2]
        Di=calculateTheDistance(lat,lon,point[1],point[0])
        # new выходит объект, иначе он изменит исходное значение lst
        ptn=[point[0],point[1],point[2]]
        ptn.append(Di)
        temp.append(ptn)

        # Согласно приведенному выше значению ptn.append (), отсортированному от малого к большому
    temp1 = sorted(temp, key=lambda point: point[3])
    # Пройдите первые 15 точек сортировки, найдите sum0 и sum1 по формуле
    if temp1[0][3]<RADIUS_POSTR:
        for point in temp1[0:15]:
            sum0 += point[2] / point[3]
            sum1 += 1 / point[3]

        return sum0 / sum1
    else:
        return None

def color(val, buckets):
    if val is None:
        return (255,255,255,0)
    assert len(colors) - 1 == len(buckets)
    for price, color in zip(buckets, colors):
        if val > price:
            return color
    return colors[-1]

def start():
    print("loading data...")
    priced_points = load_prices()
    print("pricing all the points...")
    prices = {}

    for x in range(MAX_X):
        print("  %s/%s" % (x, MAX_X))
        for y in range(MAX_Y):
            lat, lon = pixel_to_ll(x, y)
            prices[x, y] = get_h(lon, lat, priced_points)
    # color regions by price
    I = Image.new('RGBA', (MAX_X, MAX_Y))
    IM = I.load()
    for x in range(MAX_X):
        for y in range(MAX_Y):
            IM[x, y] = color(prices[x, y], buckets)

    I.save("500.png", "PNG")

'''prices = {}
priced_points = load_prices()
def multi(x):
    global prices
    global priced_points
    print("  %s/%s" % (x, MAX_X))
    for y in range(MAX_Y):
        lat, lon = pixel_to_ll(x, y)
        prices[x, y] = get_h(lon, lat, priced_points)
def start():
    global prices
    iter_multi=0
    while iter_multi<=MAX_X:
        th = Thread(target=multi, args=(iter_multi,))
        th.start()
        iter_multi=iter_multi+1
    time.sleep(5)
    # color regions by price
    I = Image.new('RGBA', (MAX_X, MAX_Y))
    IM = I.load()
    for x in range(MAX_X):
        for y in range(MAX_Y):
            IM[x, y] = color(prices[x,y], buckets)

    I.save("500.png", "PNG")'''

def start2():
    global x_pr
    global s
    global d
    mapbox_api_key = r"pk.eyJ1IjoiZGFtaXIxOTkwIiwiYSI6ImNrdjVteGhnYzR0ZzUyb3M3aGExbDU4ZzgifQ.ae9NSjeWP5PzeVJqKFqpZw"
    tileset_ID_str = "ckv5n5ulj2gsg15nzai2nr3wb"
    tilesize_pixels = "256"
    map = folium.Map(location=[55.154, 61.4291], zoom_start=12,
                     #tiles=f"https://api.mapbox.com/styles/v1/mapbox/{tileset_ID_str}/tiles/{tilesize_pixels}/{{z}}/{{x}}/{{y}}@2x?access_token={mapbox_api_key}",
                     tiles=f"https://api.mapbox.com/styles/v1/damir1990/{tileset_ID_str}/tiles/{tilesize_pixels}/{{z}}/{{x}}/{{y}}@2x?access_token={mapbox_api_key}",
                     attr="Mapbox")
    #map = folium.Map( control_scale=True)
    image = folium.raster_layers.ImageOverlay('./500.png',[[MIN_LAT,MIN_LON], [MAX_LAT, MAX_LON]],opacity=0.8)
    image.add_to(map)

    s_d_x_pr=[]
    i=0
    while i < len(s):
        s_d_x_pr.append([s[i],d[i]])
        i=i+1
    folium.plugins.MarkerCluster(s_d_x_pr,x_pr).add_to(map)
    new_buck=[]
    for buck in buckets:
        new_buck.append(int(buck))
    map = add_categorical_legend(map, ' ',
                               colors_=colors,
                               labels=new_buck)

    map.save('5.html')

if __name__ == "__main__":
    start()
    start2()

